<%-
  setup_command = context.setup_command
-%>
#!/bin/bash -l

# Benchmark info
echo "TIMING - Starting main script at: $(date)"

# Set working directory to home directory
cd "${HOME}"

#
# Start Jupyter Lab Server
#

<%- unless context.modules.blank? -%>
# Purge the module environment to avoid conflicts
module purge

# Load the require modules
module load <%= context.modules %>

# List loaded modules
module list
<%- end -%>

# If the setup command is 'conda activate ...', then we need to do some setup.
<%- if setup_command.present? && setup_command.start_with?('conda activate') -%>
echo "Setting up conda environment..."
echo "Loading module: 'module load anaconda3'"
module load anaconda3
module list

# This solution is thanks to: https://discourse.openondemand.org/t/jupyterlab-and-conda-conda-init-fails/3111/6
echo "Running 'eval ...' here"
eval "$(conda shell.bash hook)"

<%- end -%>

# Activate env based on setup command (or default)
<% source_setup = setup_command.present? ? setup_command : "source /software/ood_apps/jupyterlab/bin/activate" %>

<%- if setup_command.present? -%>
echo "Setup command given:  <%= setup_command %>"
<%- else -%>
echo "No setup command!  Defaulting to: source /software/ood_apps/jupyterlab/bin/activate"
<%- end -%>

# Run the setup command:
<%= setup_command %>

# Benchmark info
echo "TIMING - Starting jupyter at: $(date)"

# Launch the Jupyter Lab Server
set -x
jupyter lab --config="${CONFIG_FILE}" <%= context.extra_jupyter_args %>
